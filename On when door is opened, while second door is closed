/**
 *  On when door is opened, while second door is closed
 *
 *  Copyright 2015 Jason Ziemba
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "On when door is opened, while second door is closed",
    namespace: "the2352",
    author: "Jason Ziemba",
    description: "Turns light on when door is opened, while second door remains closed",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience%402x.png"
)

preferences {
	section("When this door opens...") {
		input "contact1", "capability.contactSensor", title: "Which Door?", required: true
	}
    section("And this door is closed...") {
    	input "contact2", "capability.contactSensor", title: "Which Door?", required: true
    }    
	section("Turn on this light...") {
		input "switch1", "capability.switch", required: true
	}
}

def installed() {
	log.debug "Installed with settings: ${settings}"
	subscribe(contact1, "contact.open", contactOpenHandler)
    subscribe(contact2, "contact.closed", contactClosedHandler)
    initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"
	unsubscribe()
	subscribe(contact1, "contact.open", contactOpenHandler)
	subscribe(contact2, "contact.closed", contactClosedHandler) 
}

def comboCreator(){
	if(contact1 == "open" && contact2 == "closed"){
		state.deviceCombo = "openClosed"    
	}
	else if(contact1 == "closed" && contact2 == "closed"){
		state.deviceCombo = "closedClosed"
	}
	else if(contact1 == "closed" && contact2 == "open"){
		state.deviceCombo = "closedOpen"
	}
}

def contactOpenHandler(evt) {
	log.debug "$evt.value: $evt"
    log.trace "Turning on $switches because $contact1 opened and $contact2 closed"
	if (evt.value == "Open") {
		switch1.on() 
	} else if (evt.value == "closed") {
		switch1.off(delay: 0)
	}
}
