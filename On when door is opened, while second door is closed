/**
 *  On when door is opened, while second door is closed
 *
 *  Copyright 2015 Jason Ziemba
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "On when door is opened, while second door is closed",
    namespace: "the2352",
    author: "Jason Ziemba",
    description: "Turns light on when door is opened, while second door remains closed",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience%402x.png"
)

preferences {
	section("When this door opens...") {
		input "contact1", "capability.contactSensor", title: "Which Door?", required: true
	}
    section("And this door is closed...") {
    	input "contact2", "capability.contactSensor", title: "Which Door?", required: true
    }    
	section("Turn on this light...") {
		input "switch1", "capability.switch", title: "Which Door?", required: true
	}
}

def installed() {
	log.debug "Installed with settings: ${settings}"

	init()
}

def updated() {
	log.debug "Updated with settings: ${settings}"

	unsubscribe()
	init()
}

def comboCreator() {
	if(contact1 == "open" && contact2 == "closed"){
		state.deviceCombo = "openClosed"    
	}
	else if(contact1 == "closed" && contact2 == "closed"){
		state.deviceCombo = "closedClosed"
	}
	else if(contact1 == "closed" && contact2 == "open"){
		state.deviceCombo = "closedOpen"
	}
    log.debug "Device combo is $state.deviceCombo"
}

def contactHandler(evt) {
	log.debug "$evt.value: $evt"
    log.trace "Turning on $switches because $contact1 opened and $contact2 closed"
	if (state.deviceCombo == "openClosed") {
		switch1.on() 
	} else if (state.deviceCombo == "closedClosed") {
		switch1.off(delay: 0)
	} else if (state.deviceCombo == "closedOpen") {
		switch1.off(delay: 0)
	}
}

def init () {
	comboCreator()
    if(state.deviceCombo == "openClosed"){
    	subscribe(contact1, "contact1", contactHandler)
        subscribe(contact2, "contact2", contactHandler)
        log.debug "Correct state returned: House door opened & garage door closed"
	}
    else if(contact1 == "closed" && contact2 == "closed"){
		state.deviceCombo = "closedClosed"
        subscribe(contact1, "contact1", contactHandler)
        subscribe(contact2, "contact2", contactHandler)
        log.debug "Incorrect state returned: House door is closed & garage is door closed"
	}
	else if(contact1 == "closed" && contact2 == "open"){
		state.deviceCombo = "closedOpen"
        subscribe(contact1, "contact1", contactHandler)
        subscribe(contact2, "contact2", contactHandler)
        log.debug "Incorrect state returned: House door cloed & garage door is open"
}


}
